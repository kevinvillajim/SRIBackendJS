# Pruebas para el módulo de usuarios
# Usar con REST Client extension en VS Code o Postman

### 1. Health Check
GET http://localhost:3000/health

### 2. Información de la API
GET http://localhost:3000/api

### 3. Verificar disponibilidad de RUC
GET http://localhost:3000/api/users/check-ruc/1234567890001

### 4. Registrar nuevo usuario
POST http://localhost:3000/api/users/register
Content-Type: application/json

{
  "ruc": "1234567890001",
  "razon_social": "EMPRESA PRUEBA S.A.",
  "nombre_comercial": "EMPRESA PRUEBA",
  "direccion_matriz": "Av. Principal 123, Quito, Ecuador",
  "ambiente": "1",
  "establecimiento": "001",
  "punto_emision": "001",
  "obligado_contabilidad": "SI",
  "contribuyente_especial": "123",
  "agente_retencion": "1"
}

### 5. Obtener usuario por ID
GET http://localhost:3000/api/users/1

### 6. Obtener usuario por RUC
GET http://localhost:3000/api/users/ruc/1234567890001

### 7. Listar todos los usuarios
GET http://localhost:3000/api/users

### 8. Listar usuarios con paginación
GET http://localhost:3000/api/users?page=1&limit=5

### 9. Actualizar usuario
PUT http://localhost:3000/api/users/1
Content-Type: application/json

{
  "razon_social": "EMPRESA ACTUALIZADA S.A.",
  "nombre_comercial": "EMPRESA ACTUALIZADA",
  "ambiente": "2"
}

### 10. Obtener estado del certificado
GET http://localhost:3000/api/users/1/certificate

### 11. Activar certificado (sin certificado aún)
PUT http://localhost:3000/api/users/1/certificate/toggle
Content-Type: application/json

{
  "activo": true
}

### 12. Intentar registrar RUC duplicado (debe fallar)
POST http://localhost:3000/api/users/register
Content-Type: application/json

{
  "ruc": "1234567890001",
  "razon_social": "OTRA EMPRESA",
  "direccion_matriz": "Otra dirección"
}

### 13. Intentar registrar con datos inválidos (debe fallar)
POST http://localhost:3000/api/users/register
Content-Type: application/json

{
  "ruc": "123456789",
  "razon_social": "",
  "direccion_matriz": "Una dirección"
}