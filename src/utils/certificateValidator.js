const fs = require("fs");
const path = require("path");
const SRISigningService = require("../services/SRISigningService");

// Inicializar servicio de firmado para validaciones
const signingService = new SRISigningService();

// Validar archivo de certificado .p12 usando el nuevo servicio
const validateCertificateFile = async (filePath, password) => {
	console.log(
		"üîß DEBUG: Iniciando validaci√≥n de certificado con SRISigningService"
	);
	console.log("üîß DEBUG: Archivo:", filePath);
	console.log("üîß DEBUG: Password proporcionado:", password ? "S√ç" : "NO");

	const validation = {
		isValid: false,
		errors: [],
		warnings: [],
		info: {},
	};

	try {
		// Verificar que el archivo existe
		console.log("üîß DEBUG: Verificando existencia del archivo...");
		if (!fs.existsSync(filePath)) {
			validation.errors.push("El archivo de certificado no existe");
			return validation;
		}
		console.log("üîß DEBUG: Archivo existe");

		// Verificar tama√±o del archivo
		console.log("üîß DEBUG: Verificando tama√±o del archivo...");
		const stats = fs.statSync(filePath);
		if (stats.size === 0) {
			validation.errors.push("El archivo est√° vac√≠o");
			return validation;
		}

		if (stats.size > 5 * 1024 * 1024) {
			// 5MB
			validation.errors.push("El archivo es muy grande (m√°ximo 5MB)");
			return validation;
		}

		validation.info.fileSize = stats.size;
		validation.info.fileName = path.basename(filePath);
		console.log("üîß DEBUG: Archivo v√°lido, tama√±o:", stats.size, "bytes");

		// Usar el servicio de firmado para validar el certificado
		try {
			console.log("üîß DEBUG: Validando certificado con SRISigningService...");

			const serviceValidation = await signingService.validateCertificate(
				filePath,
				password
			);
			console.log(
				"üîß DEBUG: Resultado de validaci√≥n del servicio:",
				serviceValidation
			);

			if (!serviceValidation.isValid) {
				validation.errors = serviceValidation.errors;
				validation.warnings = serviceValidation.warnings;
				return validation;
			}

			// Si la validaci√≥n es exitosa, obtener informaci√≥n adicional del certificado
			const certInfo = await signingService.getCertificateInfo(
				filePath,
				password
			);
			if (certInfo.success) {
				validation.info.certificateInfo = certInfo.info;
				console.log(
					"üîß DEBUG: Informaci√≥n del certificado obtenida:",
					certInfo.info
				);
			}

			validation.isValid = true;
			validation.warnings = serviceValidation.warnings;
			validation.info.status =
				"Certificado validado correctamente con SRISigningService";
			validation.info.serviceValidation = serviceValidation.info;

			console.log("üîß DEBUG: Certificado validado exitosamente");
		} catch (certificateError) {
			console.log(
				"üîß DEBUG: Error procesando certificado:",
				certificateError.message
			);
			validation.errors.push(
				`Error al procesar el certificado: ${certificateError.message}`
			);

			// Errores comunes de certificados
			if (
				certificateError.message.includes("password") ||
				certificateError.message.includes("Invalid") ||
				certificateError.message.includes("decrypt")
			) {
				validation.errors.push(
					"La contrase√±a del certificado podr√≠a ser incorrecta"
				);
			} else if (
				certificateError.message.includes("format") ||
				certificateError.message.includes("parse")
			) {
				validation.errors.push("El formato del certificado no es v√°lido");
			} else if (
				certificateError.message.includes("UANATACA") ||
				certificateError.message.includes("issuer")
			) {
				validation.warnings.push(
					"El certificado podr√≠a no ser de Uanataca (requerido para SRI)"
				);
			}
		}
	} catch (error) {
		console.log(
			"üîß DEBUG: Error general validando certificado:",
			error.message
		);
		validation.errors.push(`Error validando certificado: ${error.message}`);
	}

	console.log("üîß DEBUG: Resultado final de validaci√≥n:", validation);
	return validation;
};

// Validar contrase√±a del certificado
const validateCertificatePassword = (password) => {
	const validation = {
		isValid: false,
		errors: [],
		warnings: [],
	};

	if (!password) {
		validation.errors.push("La contrase√±a del certificado es obligatoria");
		return validation;
	}

	if (typeof password !== "string") {
		validation.errors.push("La contrase√±a debe ser una cadena de texto");
		return validation;
	}

	if (password.length < 4) {
		validation.warnings.push(
			"La contrase√±a parece muy corta (m√≠nimo recomendado: 4 caracteres)"
		);
	}

	if (password.length > 100) {
		validation.errors.push(
			"La contrase√±a es muy larga (m√°ximo 100 caracteres)"
		);
		return validation;
	}

	// Verificar caracteres especiales que podr√≠an causar problemas
	if (password.includes('"') || password.includes("'")) {
		validation.warnings.push(
			"La contrase√±a contiene comillas, aseg√∫rese de que sea correcta"
		);
	}

	validation.isValid = true;
	return validation;
};

// Extraer informaci√≥n b√°sica del certificado (sin validar contrase√±a)
const getCertificateBasicInfo = (filePath) => {
	try {
		const stats = fs.statSync(filePath);
		return {
			fileName: path.basename(filePath),
			fileSize: stats.size,
			uploadDate: stats.birthtime,
			lastModified: stats.mtime,
			extension: path.extname(filePath).toLowerCase(),
			sizeFormatted: formatFileSize(stats.size),
		};
	} catch (error) {
		return {
			error: `No se pudo obtener informaci√≥n del archivo: ${error.message}`,
		};
	}
};

// Funci√≥n para validar formato del archivo (sin cargar el contenido)
const validateFileFormat = (filePath) => {
	const validation = {
		isValid: false,
		errors: [],
		warnings: [],
	};

	try {
		// Verificar extensi√≥n
		const extension = path.extname(filePath).toLowerCase();
		const allowedExtensions = [".p12", ".pfx"];

		if (!allowedExtensions.includes(extension)) {
			validation.errors.push(
				`Extensi√≥n no v√°lida: ${extension}. Se requiere .p12 o .pfx`
			);
			return validation;
		}

		// Verificar que el archivo existe y no est√° vac√≠o
		if (!fs.existsSync(filePath)) {
			validation.errors.push("El archivo no existe");
			return validation;
		}

		const stats = fs.statSync(filePath);
		if (stats.size === 0) {
			validation.errors.push("El archivo est√° vac√≠o");
			return validation;
		}

		if (stats.size < 100) {
			validation.warnings.push(
				"El archivo parece muy peque√±o para un certificado v√°lido"
			);
		}

		// Leer los primeros bytes para verificar firma del archivo
		try {
			const buffer = fs.readFileSync(filePath, {start: 0, end: 15});

			// Los archivos .p12/.pfx son archivos PKCS#12 que comienzan con secuencias espec√≠ficas
			if (buffer.length < 16) {
				validation.warnings.push("El archivo parece muy peque√±o");
			}

			// Verificaci√≥n b√°sica de formato PKCS#12
			// Los archivos PKCS#12 t√≠picamente comienzan con 0x30 (SEQUENCE ASN.1)
			if (buffer.length > 0 && buffer[0] !== 0x30) {
				validation.warnings.push(
					"El archivo podr√≠a no ser un certificado PKCS#12 v√°lido"
				);
			}
		} catch (readError) {
			validation.warnings.push("No se pudo verificar el contenido del archivo");
		}

		validation.isValid = true;
	} catch (error) {
		validation.errors.push(`Error validando formato: ${error.message}`);
	}

	return validation;
};

// Funci√≥n auxiliar para formatear tama√±o de archivo
const formatFileSize = (bytes) => {
	if (bytes === 0) return "0 Bytes";
	const k = 1024;
	const sizes = ["Bytes", "KB", "MB", "GB"];
	const i = Math.floor(Math.log(bytes) / Math.log(k));
	return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
};

// Validar certificado para uso espec√≠fico con SRI
const validateCertificateForSRI = async (filePath, password) => {
	console.log("üèõÔ∏è Validando certificado espec√≠ficamente para SRI Ecuador");

	const validation = await validateCertificateFile(filePath, password);

	if (!validation.isValid) {
		return validation;
	}

	// Validaciones adicionales espec√≠ficas para SRI
	try {
		const certInfo = await signingService.getCertificateInfo(
			filePath,
			password
		);

		if (certInfo.success && certInfo.info) {
			const issuerName = certInfo.info.issuerName || "";

			// Verificar que sea certificado de Uanataca
			if (
				!issuerName.includes("UANATACA") &&
				!issuerName.includes("VATES-A66721499")
			) {
				validation.warnings.push(
					"El certificado no parece ser de Uanataca, podr√≠a ser rechazado por el SRI"
				);
			}

			// Verificar formato del IssuerName
			if (issuerName.includes("UANATACA")) {
				if (issuerName.includes("2016")) {
					validation.info.certificateType = "Uanataca 2016 (1-3 a√±os)";
				} else if (issuerName.includes("2021")) {
					validation.info.certificateType = "Uanataca 2021 (4-5 a√±os)";
				} else {
					validation.warnings.push(
						"No se pudo determinar el tipo de certificado Uanataca"
					);
				}
			}

			validation.info.sriCompatible = true;
			validation.info.issuerName = issuerName;
		}
	} catch (error) {
		validation.warnings.push(
			`No se pudo verificar compatibilidad con SRI: ${error.message}`
		);
	}

	return validation;
};

module.exports = {
	validateCertificateFile,
	validateCertificatePassword,
	getCertificateBasicInfo,
	validateFileFormat,
	validateCertificateForSRI,
	formatFileSize,
};
